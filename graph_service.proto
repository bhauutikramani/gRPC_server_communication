syntax = "proto3";

package graph;

// Service definition
service GraphService {
    // Submit a graph from a client
    rpc SubmitGraph(GraphSubmission) returns (SubmissionResponse);
    
    // Query for independent set
    rpc IndependentSetQuery(ISQuery) returns (BooleanResponse);
    
    // Query for matching
    rpc MatchingQuery(MQuery) returns (BooleanResponse);
    
    // Get current graph status (optional utility method)
    rpc GetGraphStatus(Empty) returns (GraphStatus);
    
    // Add this method for clearing the graph
    rpc ResetGraph(ResetRequest) returns (StatusResponse);
}

// Message types
message GraphSubmission {
    string client_id = 1;
    repeated AdjacencyList adjacency_lists = 2;
}

message AdjacencyList {
    int32 node = 1;
    repeated int32 neighbors = 2;
}

message SubmissionResponse {
    bool success = 1;
    string message = 2;
}

message ISQuery {
    int32 k = 1;
}

message MQuery {
    int32 k = 1;
}

message BooleanResponse {
    bool result = 1;
    string message = 2;
}

message Empty {}

message GraphStatus {
    int32 total_nodes = 1;
    int32 total_edges = 2;
    repeated string connected_clients = 3;
}

message StatusResponse {
    bool success = 1;
    string message = 2;
}

message ResetRequest {
    string client_id = 1;
}